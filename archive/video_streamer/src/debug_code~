/*

i++;

sprintf(filename, "./images/img_%d", i);

ROS_INFO_STREAM("debug: 1");

printf("buffer address: %x",bufAddr);
ROS_INFO_STREAM("debug: 2");

stream = fopen(filename,"w");

ROS_INFO_STREAM("debug: 3");

fwrite(bufAddr,1,fillLength,stream);

printf("fill length: %d",fillLength);
ROS_INFO_STREAM("debug: 4");
fflush(stream);
fclose(stream);
ROS_INFO_STREAM("debug: 5");
*/



//cv::Mat imgFrame = cv::imdecode(bufAddr,1);
//cv::imwrite(prefix,imgFrame,1);

// Include the ROS C++ APIs memcpy(&image_cam0->data[0], bufAddr, width_*height_*3);



/*
ImagePtr image_cam0(new Image);

ros::Time capture_time = ros::Time::now();

// Initializing the ROS image Ptr
image_cam0->height = width;
image_cam0->width = height;
image_cam0->step = 3*width;
image_cam0->encoding = image_encodings::RGB8;
image_cam0->header.stamp = capture_time;
image_cam0->header.seq = pair_id;
image_cam0->header.frame_id = "TDA2 camera";

//converting image buffer from YUV to RGB color space 
ROS_INFO_STREAM("debug: imgYUV");
cv::Mat imgYUV = cv::Mat(height,width, CV_8UC3,bufAddr);
ROS_INFO_STREAM("debug: imgRGB");
cv::Mat imgRGB;
ROS_INFO_STREAM("debug: cvtcolor");
cv::cvtColor(imgYUV, imgRGB,  CV_YCrCb2RGB);
ROS_INFO_STREAM("debug: cvtd color");

// add the frame to the file
if(done == 0)
{
ROS_INFO_STREAM("debug: image write");
writer.write(imgRGB) ;
ROS_INFO_STREAM("debug: image written");
imgRGB.release();
ROS_INFO_STREAM("debug: released");
}
//release the video writer once the writing is finished

if(done == 1)
{
writer.release();
ROS_INFO_STREAM("debug: video released");
}



//Publishing the image over a ROS topic
printf("fill-length: %d width: %d height: %d \n", fillLength,width,height);
ROS_INFO_STREAM("publishing the image");
memcpy(&image_cam0->data[0], bufAddr,1);
ROS_INFO_STREAM("publishing the image 2");
cam_pub_0_.publish(image_cam0);
ROS_INFO_STREAM("published the image");


*/



// avp

/*
int frameStreamHandler(System_BitstreamBuffer *bitstreamBuf,NullLink_Obj *pObj)
{
ROS_INFO_STREAM("writing the buffer");
fwrite(bitstreamBuf->bufAddr, bitstreamBuf->fillLength, 1, pObj->fpDataStream);
return 0;
}
*/
