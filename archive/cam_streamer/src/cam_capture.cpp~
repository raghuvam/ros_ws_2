// Include the ROS C++ APIs
#include <ros/ros.h>
#include <ros/time.h>
#include <nodelet/loader.h>
#include "sensor_msgs/Image.h"
#include "sensor_msgs/CompressedImage.h"
#include "sensor_msgs/image_encodings.h"
#include "sensor_msgs/CameraInfo.h"
#include "camera_info_manager/camera_info_manager.h"
#include "image_transport/image_transport.h"
#include "image_transport/simple_publisher_plugin.h"
#include <opencv/cv.h>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include "jpeg_publisher.h"
using namespace cv;
using namespace sensor_msgs;

// parameters for image transport
int i=0;
char filename[30]="images/test";
FILE *stream;
unsigned int pair_id = 0;
jpeg_image_transport::JpegPublisher cam_pub_0_;
int length;
sensor_msgs::CompressedImage imgEncoded;

extern "C"
{
#include "main.h"

int frameStreamHandler(void *bufAddr,int fillLength,FILE *fpDataStream,int width,int height)
{

/*
cv::Mat imageNew(1,fillLength,CV_8U);
length = (int)fillLength;

memcpy(imageNew.data,bufAddr,length);

cv::Mat image = cv::imdecode(imageNew,CV_LOAD_IMAGE_COLOR);

ImagePtr msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", image).toImageMsg();

ROS_INFO_STREAM("debug: image published");
cam_pub_0_.publish(msg);


*/

	
	imgEncoded.header = std_msgs::Header();
	imgEncoded.format = "jpeg";
	memcpy(&imgEncoded.data[0],bufAddr,fillLength);
	ROS_INFO_STREAM("debug: image published");
	cam_pub_0_.publish(imgEncoded);
	


return 0;
}

}

int main(int argc, char** argv) {

  ros::init(argc, argv, "cam_streamer");
 
ros::NodeHandle nh;
image_transport::ImageTransport it(nh); 
cam_pub_0_ = it.advertise("image/compressed", 1);
  ros::start();

  ROS_INFO_STREAM("Hello, This is cam_streamer");


/////////// VISION_SDK_CODE ////////////

VisionSDK_main();

////////////////////////////////////////

  ros::spin();
  ros::shutdown();

  return 0;
}
