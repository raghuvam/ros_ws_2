
#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace cv;
using namespace std;

int m = 0;
int height =720;
int width =1280;

extern "C"
{
#include "common.h"
#include <stdio.h>
//#include <file.h>
#include <string.h>
#define SAT(c) \
   if (c & (~255)) { if (c < 0) c = 0; else c = 255; }


int lowThreshold =35;
int ratio = 3;
int kernel_size =3;


cv::Mat cannyEdgeDetector(cv::Mat& imgEnc)
{
cv::Mat imgEdges,imgGrey,imgResized;

cv::cvtColor( imgEnc, imgGrey, CV_RGB2GRAY );

cv::blur( imgGrey, imgEdges, Size(3,3));

cv::Canny( imgEdges, imgEdges, lowThreshold, lowThreshold*ratio, kernel_size);

return imgEdges;
}


void gray2yuv(Mat &imgray,unsigned char *dst)
{



int i, j;

resize(imgray,imgray,cv::Size(640,720));

int red, green, blue;

   for (j = 0; j < 720; j++) {
      uint8_t *ptr = (uint8_t*)((char*)dst + j * 1280*2);
      for (i = 0; i < 640; i++) {
         
         red = imgray.at<uchar>(j,i);
         green = imgray.at<uchar>(j,i);
         blue = imgray.at<uchar>(j,i); 
         unsigned char y = (0.299 * red) + (0.587 * green) + (0.114 * blue);

         *(ptr++) = y;
         *(ptr++) = (blue - y) * 0.565 + 128;
         *(ptr++) = y;
         *(ptr++) = (red - y) * 0.713 + 128;
      }
   }



}



void getImage(unsigned char*src,unsigned char *dst)
{

//uint8_t *src = (uint8_t *)malloc(sizeof(uint8_t *)*height*width*2);

Mat image(720,1280,CV_8UC3);

   uint8_t *s, *d;
   int l, c;
   int r, g, b, cr, cg, cb, y1, y2;
   int h=0;
   int w=0;
   l = height;

   s = src;
   d = dst;
 while (l--) {
  	 c = width >> 1;
      while (c--) {
         y1 = *s++;
         cb = ((*s - 128) * 454) >> 8;
         cg = (*s++ - 128) * 88;
         y2 = *s++;
         cr = ((*s - 128) * 359) >> 8;
         cg = (cg + (*s++ - 128) * 183) >> 8;

         r = y1 + cr;
         b = y1 + cb;
         g = y1 - cg;
         SAT(r);
         SAT(g);
         SAT(b);

image.at<cv::Vec3b>(h,w)[0] = r;
image.at<cv::Vec3b>(h,w)[1] = g;
image.at<cv::Vec3b>(h,w)[2] = b;
w++;
         r = y2 + cr;
         b = y2 + cb;
         g = y2 - cg;
         SAT(r);
         SAT(g);
         SAT(b);
image.at<cv::Vec3b>(h,w)[0] = r;
image.at<cv::Vec3b>(h,w)[1] = g;
image.at<cv::Vec3b>(h,w)[2] = b;
w++;
      }
h++;
w=0;
   }
////


Mat imgray = cannyEdgeDetector(image);
gray2yuv(imgray,dst);

}

}

int main (int argc, char** argv)
{
cout << "calling buf main" << endl ;

bufDisplay_main(argc,argv);

return 0;
}

